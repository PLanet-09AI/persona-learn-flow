import { useState, useEffect } from 'react';
import { useAuthContext } from '@/contexts/AuthContext';
import { chatService, analyticsService } from '@/services/firebase';
import type { ChatMessage } from '@/types/models';

interface UseChatOptions {
  contentId?: string;
  quizId?: string;
  sessionId?: string;
  onError?: (error: Error) => void;
}

// Local version of ChatSession with isLoading property
interface LocalChatSession {
  id: string;
  title: string;
  messages: ChatMessage[];
  isLoading: boolean;
  userId: string;
  contentArtifactId?: string;
  quizId?: string;
  createdAt: Date;
  updatedAt: Date;
}

export const useChat = ({ contentId, quizId, sessionId, onError }: UseChatOptions = {}) => {
  const [session, setSession] = useState<LocalChatSession | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<Error | null>(null);
  const { user } = useAuthContext();

  // Initialize or load existing chat session
  const initializeChat = async (title: string = 'Chat Session') => {
    if (!user) return;
    
    setIsLoading(true);
    try {
      let chatSessionId = sessionId;
      
      // If no session ID was provided, create a new session
      if (!chatSessionId) {
        chatSessionId = await chatService.createSession({
          userId: user.id,
          contentArtifactId: contentId,
          quizId: quizId,
          title: title
        });
      }
      
      // Load the session
      const chatSession = await chatService.getSessionById(chatSessionId);
      if (chatSession) {
        setSession({
          id: chatSession.id,
          title: chatSession.title,
          messages: chatSession.messages,
          isLoading: false,
          userId: chatSession.userId,
          contentArtifactId: chatSession.contentArtifactId,
          quizId: chatSession.quizId,
          createdAt: chatSession.createdAt,
          updatedAt: chatSession.updatedAt
        });
      }
    } catch (err: any) {
      setError(err);
      if (onError) onError(err);
    } finally {
      setIsLoading(false);
    }
  };

  // Send a user message and get AI response
  const sendMessage = async (content: string): Promise<void> => {
    if (!session || !user) return;
    
    setIsLoading(true);
    
    try {
      // Add user message
      const userMessage: Omit<ChatMessage, 'id'> = {
        userId: user.id,
        contentArtifactId: contentId,
        quizId: quizId,
        role: 'user',
        content,
        timestamp: new Date()
      };
      
      // For local state, we need to create a temporary id for the message
      const tempUserMessage: ChatMessage = {
        ...userMessage,
        id: `temp-${Date.now()}`
      };
      
      // Update local state immediately for better UX
      setSession(prev => {
        if (!prev) return null;
        return {
          ...prev,
          messages: [...prev.messages, tempUserMessage]
        };
      });
      
      // Save to Firebase
      await chatService.addMessage(session.id, userMessage);
      
      // Track analytics event
      await analyticsService.trackEvent({
        userId: user.id,
        eventType: 'chat_question',
        meta: { 
          sessionId: session.id,
          contentId,
          quizId,
          question: content
        },
        timestamp: new Date()
      });
      
      // Simulate AI response (in a real app, this would call your AI service)
      setTimeout(async () => {
        // Add AI response
        const aiMessage: Omit<ChatMessage, 'id'> = {
          userId: user.id,
          contentArtifactId: contentId,
          quizId: quizId,
          role: 'assistant',
          content: `I received your message: "${content}". This is a simulated response. In a real application, this would be generated by an AI model.`,
          timestamp: new Date()
        };
        
        // For local state, we need to create a temporary id for the message
        const tempAiMessage: ChatMessage = {
          ...aiMessage,
          id: `temp-${Date.now()}`
        };
        
        // Update local state
        setSession(prev => {
          if (!prev) return null;
          return {
            ...prev,
            messages: [...prev.messages, tempAiMessage]
          };
        });
        
        // Save to Firebase
        await chatService.addMessage(session.id, aiMessage);
        
        // Track analytics event
        await analyticsService.trackEvent({
          userId: user.id,
          eventType: 'chat_response',
          meta: { 
            sessionId: session.id,
            contentId,
            quizId,
            responseLength: aiMessage.content.length
          },
          timestamp: new Date()
        });
        
        setIsLoading(false);
      }, 1000);
    } catch (err: any) {
      setError(err);
      setIsLoading(false);
      if (onError) onError(err);
    }
  };

  return {
    session,
    messages: session?.messages || [],
    isLoading,
    error,
    initializeChat,
    sendMessage
  };
};
